{"filter":false,"title":"OrderItem.php","tooltip":"/Portfolio_work/models/OrderItem.php","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":19,"column":70},"end":{"row":19,"column":71},"action":"remove","lines":["s"],"id":52},{"start":{"row":19,"column":69},"end":{"row":19,"column":70},"action":"remove","lines":["s"]},{"start":{"row":19,"column":68},"end":{"row":19,"column":69},"action":"remove","lines":["e"]},{"start":{"row":19,"column":67},"end":{"row":19,"column":68},"action":"remove","lines":["r"]},{"start":{"row":19,"column":66},"end":{"row":19,"column":67},"action":"remove","lines":["d"]},{"start":{"row":19,"column":65},"end":{"row":19,"column":66},"action":"remove","lines":["d"]},{"start":{"row":19,"column":64},"end":{"row":19,"column":65},"action":"remove","lines":["a"]}],[{"start":{"row":19,"column":64},"end":{"row":19,"column":65},"action":"insert","lines":["n"],"id":53},{"start":{"row":19,"column":65},"end":{"row":19,"column":66},"action":"insert","lines":["u"]},{"start":{"row":19,"column":66},"end":{"row":19,"column":67},"action":"insert","lines":["m"]},{"start":{"row":19,"column":67},"end":{"row":19,"column":68},"action":"insert","lines":["b"]},{"start":{"row":19,"column":68},"end":{"row":19,"column":69},"action":"insert","lines":["e"]},{"start":{"row":19,"column":69},"end":{"row":19,"column":70},"action":"insert","lines":["r"]}],[{"start":{"row":19,"column":78},"end":{"row":19,"column":79},"action":"remove","lines":["l"],"id":54},{"start":{"row":19,"column":77},"end":{"row":19,"column":78},"action":"remove","lines":["e"]},{"start":{"row":19,"column":76},"end":{"row":19,"column":77},"action":"remove","lines":["t"]}],[{"start":{"row":19,"column":76},"end":{"row":19,"column":77},"action":"insert","lines":["p"],"id":55},{"start":{"row":19,"column":77},"end":{"row":19,"column":78},"action":"insert","lines":["r"]},{"start":{"row":19,"column":78},"end":{"row":19,"column":79},"action":"insert","lines":["i"]},{"start":{"row":19,"column":79},"end":{"row":19,"column":80},"action":"insert","lines":["c"]},{"start":{"row":19,"column":80},"end":{"row":19,"column":81},"action":"insert","lines":["e"]}],[{"start":{"row":20,"column":33},"end":{"row":20,"column":34},"action":"remove","lines":["r"],"id":56},{"start":{"row":20,"column":32},"end":{"row":20,"column":33},"action":"remove","lines":["e"]},{"start":{"row":20,"column":31},"end":{"row":20,"column":32},"action":"remove","lines":["s"]},{"start":{"row":20,"column":30},"end":{"row":20,"column":31},"action":"remove","lines":["u"]}],[{"start":{"row":20,"column":30},"end":{"row":20,"column":31},"action":"insert","lines":["o"],"id":57},{"start":{"row":20,"column":31},"end":{"row":20,"column":32},"action":"insert","lines":["r"]},{"start":{"row":20,"column":32},"end":{"row":20,"column":33},"action":"insert","lines":["d"]},{"start":{"row":20,"column":33},"end":{"row":20,"column":34},"action":"insert","lines":["e"]},{"start":{"row":20,"column":34},"end":{"row":20,"column":35},"action":"insert","lines":["r"]}],[{"start":{"row":21,"column":36},"end":{"row":21,"column":37},"action":"remove","lines":["e"],"id":58},{"start":{"row":21,"column":35},"end":{"row":21,"column":36},"action":"remove","lines":["d"]},{"start":{"row":21,"column":34},"end":{"row":21,"column":35},"action":"remove","lines":["o"]},{"start":{"row":21,"column":33},"end":{"row":21,"column":34},"action":"remove","lines":["c"]},{"start":{"row":21,"column":32},"end":{"row":21,"column":33},"action":"remove","lines":["p"]},{"start":{"row":21,"column":31},"end":{"row":21,"column":32},"action":"remove","lines":["i"]},{"start":{"row":21,"column":30},"end":{"row":21,"column":31},"action":"remove","lines":["z"]}],[{"start":{"row":21,"column":30},"end":{"row":21,"column":31},"action":"insert","lines":["i"],"id":59},{"start":{"row":21,"column":31},"end":{"row":21,"column":32},"action":"insert","lines":["t"]},{"start":{"row":21,"column":32},"end":{"row":21,"column":33},"action":"insert","lines":["e"]},{"start":{"row":21,"column":33},"end":{"row":21,"column":34},"action":"insert","lines":["m"]}],[{"start":{"row":21,"column":34},"end":{"row":21,"column":35},"action":"insert","lines":["_"],"id":60},{"start":{"row":21,"column":35},"end":{"row":21,"column":36},"action":"insert","lines":["i"]},{"start":{"row":21,"column":36},"end":{"row":21,"column":37},"action":"insert","lines":["d"]}],[{"start":{"row":22,"column":36},"end":{"row":22,"column":37},"action":"remove","lines":["s"],"id":61},{"start":{"row":22,"column":35},"end":{"row":22,"column":36},"action":"remove","lines":["s"]},{"start":{"row":22,"column":34},"end":{"row":22,"column":35},"action":"remove","lines":["e"]},{"start":{"row":22,"column":33},"end":{"row":22,"column":34},"action":"remove","lines":["r"]},{"start":{"row":22,"column":32},"end":{"row":22,"column":33},"action":"remove","lines":["d"]},{"start":{"row":22,"column":31},"end":{"row":22,"column":32},"action":"remove","lines":["d"]},{"start":{"row":22,"column":30},"end":{"row":22,"column":31},"action":"remove","lines":["a"]}],[{"start":{"row":22,"column":30},"end":{"row":22,"column":31},"action":"insert","lines":["n"],"id":62},{"start":{"row":22,"column":31},"end":{"row":22,"column":32},"action":"insert","lines":["u"]},{"start":{"row":22,"column":32},"end":{"row":22,"column":33},"action":"insert","lines":["m"]},{"start":{"row":22,"column":33},"end":{"row":22,"column":34},"action":"insert","lines":["b"]},{"start":{"row":22,"column":34},"end":{"row":22,"column":35},"action":"insert","lines":["e"]},{"start":{"row":22,"column":35},"end":{"row":22,"column":36},"action":"insert","lines":["r"]}],[{"start":{"row":23,"column":28},"end":{"row":23,"column":29},"action":"remove","lines":["l"],"id":63},{"start":{"row":23,"column":27},"end":{"row":23,"column":28},"action":"remove","lines":["e"]},{"start":{"row":23,"column":26},"end":{"row":23,"column":27},"action":"remove","lines":["t"]}],[{"start":{"row":23,"column":26},"end":{"row":23,"column":27},"action":"insert","lines":["p"],"id":64},{"start":{"row":23,"column":27},"end":{"row":23,"column":28},"action":"insert","lines":["r"]},{"start":{"row":23,"column":28},"end":{"row":23,"column":29},"action":"insert","lines":["i"]},{"start":{"row":23,"column":29},"end":{"row":23,"column":30},"action":"insert","lines":["c"]},{"start":{"row":23,"column":30},"end":{"row":23,"column":31},"action":"insert","lines":["e"]}],[{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"remove","lines":["r"],"id":65}],[{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"remove","lines":["e"],"id":66},{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"remove","lines":["s"]},{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"remove","lines":["u"]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":20},"action":"insert","lines":["o"],"id":67},{"start":{"row":20,"column":20},"end":{"row":20,"column":21},"action":"insert","lines":["r"]},{"start":{"row":20,"column":21},"end":{"row":20,"column":22},"action":"insert","lines":["d"]},{"start":{"row":20,"column":22},"end":{"row":20,"column":23},"action":"insert","lines":["e"]},{"start":{"row":20,"column":23},"end":{"row":20,"column":24},"action":"insert","lines":["r"]}],[{"start":{"row":21,"column":25},"end":{"row":21,"column":26},"action":"remove","lines":["e"],"id":68},{"start":{"row":21,"column":24},"end":{"row":21,"column":25},"action":"remove","lines":["d"]},{"start":{"row":21,"column":23},"end":{"row":21,"column":24},"action":"remove","lines":["o"]},{"start":{"row":21,"column":22},"end":{"row":21,"column":23},"action":"remove","lines":["c"]},{"start":{"row":21,"column":21},"end":{"row":21,"column":22},"action":"remove","lines":["p"]},{"start":{"row":21,"column":20},"end":{"row":21,"column":21},"action":"remove","lines":["i"]},{"start":{"row":21,"column":19},"end":{"row":21,"column":20},"action":"remove","lines":["z"]}],[{"start":{"row":21,"column":19},"end":{"row":21,"column":20},"action":"insert","lines":["i"],"id":69},{"start":{"row":21,"column":20},"end":{"row":21,"column":21},"action":"insert","lines":["t"]},{"start":{"row":21,"column":21},"end":{"row":21,"column":22},"action":"insert","lines":["e"]},{"start":{"row":21,"column":22},"end":{"row":21,"column":23},"action":"insert","lines":["m"]}],[{"start":{"row":21,"column":19},"end":{"row":21,"column":23},"action":"remove","lines":["item"],"id":70},{"start":{"row":21,"column":19},"end":{"row":21,"column":26},"action":"insert","lines":["item_id"]}],[{"start":{"row":22,"column":25},"end":{"row":22,"column":26},"action":"remove","lines":["s"],"id":71},{"start":{"row":22,"column":24},"end":{"row":22,"column":25},"action":"remove","lines":["s"]},{"start":{"row":22,"column":23},"end":{"row":22,"column":24},"action":"remove","lines":["e"]},{"start":{"row":22,"column":22},"end":{"row":22,"column":23},"action":"remove","lines":["r"]},{"start":{"row":22,"column":21},"end":{"row":22,"column":22},"action":"remove","lines":["d"]},{"start":{"row":22,"column":20},"end":{"row":22,"column":21},"action":"remove","lines":["d"]},{"start":{"row":22,"column":19},"end":{"row":22,"column":20},"action":"remove","lines":["a"]}],[{"start":{"row":22,"column":19},"end":{"row":22,"column":20},"action":"insert","lines":["n"],"id":72},{"start":{"row":22,"column":20},"end":{"row":22,"column":21},"action":"insert","lines":["u"]},{"start":{"row":22,"column":21},"end":{"row":22,"column":22},"action":"insert","lines":["m"]}],[{"start":{"row":22,"column":19},"end":{"row":22,"column":22},"action":"remove","lines":["num"],"id":73},{"start":{"row":22,"column":19},"end":{"row":22,"column":25},"action":"insert","lines":["number"]}],[{"start":{"row":23,"column":21},"end":{"row":23,"column":22},"action":"remove","lines":["l"],"id":74},{"start":{"row":23,"column":20},"end":{"row":23,"column":21},"action":"remove","lines":["e"]},{"start":{"row":23,"column":19},"end":{"row":23,"column":20},"action":"remove","lines":["t"]}],[{"start":{"row":23,"column":19},"end":{"row":23,"column":20},"action":"insert","lines":["p"],"id":75},{"start":{"row":23,"column":20},"end":{"row":23,"column":21},"action":"insert","lines":["r"]},{"start":{"row":23,"column":21},"end":{"row":23,"column":22},"action":"insert","lines":["i"]},{"start":{"row":23,"column":22},"end":{"row":23,"column":23},"action":"insert","lines":["c"]},{"start":{"row":23,"column":23},"end":{"row":23,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"insert","lines":["i"],"id":76},{"start":{"row":76,"column":58},"end":{"row":76,"column":59},"action":"insert","lines":["t"]},{"start":{"row":76,"column":59},"end":{"row":76,"column":60},"action":"insert","lines":["e"]}],[{"start":{"row":76,"column":60},"end":{"row":76,"column":61},"action":"insert","lines":["m"],"id":77}],[{"start":{"row":76,"column":60},"end":{"row":76,"column":61},"action":"remove","lines":["m"],"id":78},{"start":{"row":76,"column":59},"end":{"row":76,"column":60},"action":"remove","lines":["e"]},{"start":{"row":76,"column":58},"end":{"row":76,"column":59},"action":"remove","lines":["t"]},{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"remove","lines":["i"]}],[{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"remove","lines":["o"],"id":79}],[{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"insert","lines":["O"],"id":80}],[{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"remove","lines":["O"],"id":81}],[{"start":{"row":76,"column":57},"end":{"row":76,"column":58},"action":"insert","lines":["o"],"id":82}],[{"start":{"row":76,"column":62},"end":{"row":76,"column":63},"action":"insert","lines":["i"],"id":83},{"start":{"row":76,"column":63},"end":{"row":76,"column":64},"action":"insert","lines":["t"]},{"start":{"row":76,"column":64},"end":{"row":76,"column":65},"action":"insert","lines":["e"]},{"start":{"row":76,"column":65},"end":{"row":76,"column":66},"action":"insert","lines":["m"]}],[{"start":{"row":76,"column":62},"end":{"row":76,"column":63},"action":"insert","lines":["_"],"id":84}],[{"start":{"row":76,"column":73},"end":{"row":76,"column":74},"action":"remove","lines":["r"],"id":85},{"start":{"row":76,"column":72},"end":{"row":76,"column":73},"action":"remove","lines":["e"]},{"start":{"row":76,"column":71},"end":{"row":76,"column":72},"action":"remove","lines":["s"]},{"start":{"row":76,"column":70},"end":{"row":76,"column":71},"action":"remove","lines":["u"]}],[{"start":{"row":76,"column":70},"end":{"row":76,"column":71},"action":"insert","lines":["o"],"id":86},{"start":{"row":76,"column":71},"end":{"row":76,"column":72},"action":"insert","lines":["r"]},{"start":{"row":76,"column":72},"end":{"row":76,"column":73},"action":"insert","lines":["d"]},{"start":{"row":76,"column":73},"end":{"row":76,"column":74},"action":"insert","lines":["e"]},{"start":{"row":76,"column":74},"end":{"row":76,"column":75},"action":"insert","lines":["r"]}],[{"start":{"row":76,"column":86},"end":{"row":76,"column":87},"action":"remove","lines":["e"],"id":87},{"start":{"row":76,"column":85},"end":{"row":76,"column":86},"action":"remove","lines":["d"]},{"start":{"row":76,"column":84},"end":{"row":76,"column":85},"action":"remove","lines":["o"]},{"start":{"row":76,"column":83},"end":{"row":76,"column":84},"action":"remove","lines":["c"]},{"start":{"row":76,"column":82},"end":{"row":76,"column":83},"action":"remove","lines":["p"]},{"start":{"row":76,"column":81},"end":{"row":76,"column":82},"action":"remove","lines":["i"]},{"start":{"row":76,"column":80},"end":{"row":76,"column":81},"action":"remove","lines":["z"]}],[{"start":{"row":76,"column":80},"end":{"row":76,"column":81},"action":"insert","lines":["i"],"id":88},{"start":{"row":76,"column":81},"end":{"row":76,"column":82},"action":"insert","lines":["t"]},{"start":{"row":76,"column":82},"end":{"row":76,"column":83},"action":"insert","lines":["e"]},{"start":{"row":76,"column":83},"end":{"row":76,"column":84},"action":"insert","lines":["m"]}],[{"start":{"row":76,"column":80},"end":{"row":76,"column":84},"action":"remove","lines":["item"],"id":89},{"start":{"row":76,"column":80},"end":{"row":76,"column":87},"action":"insert","lines":["item_id"]}],[{"start":{"row":76,"column":95},"end":{"row":76,"column":96},"action":"remove","lines":["s"],"id":90},{"start":{"row":76,"column":94},"end":{"row":76,"column":95},"action":"remove","lines":["s"]},{"start":{"row":76,"column":93},"end":{"row":76,"column":94},"action":"remove","lines":["e"]},{"start":{"row":76,"column":92},"end":{"row":76,"column":93},"action":"remove","lines":["r"]},{"start":{"row":76,"column":91},"end":{"row":76,"column":92},"action":"remove","lines":["d"]},{"start":{"row":76,"column":90},"end":{"row":76,"column":91},"action":"remove","lines":["d"]},{"start":{"row":76,"column":89},"end":{"row":76,"column":90},"action":"remove","lines":["a"]}],[{"start":{"row":76,"column":89},"end":{"row":76,"column":90},"action":"insert","lines":["n"],"id":91},{"start":{"row":76,"column":90},"end":{"row":76,"column":91},"action":"insert","lines":["u"]},{"start":{"row":76,"column":91},"end":{"row":76,"column":92},"action":"insert","lines":["m"]},{"start":{"row":76,"column":92},"end":{"row":76,"column":93},"action":"insert","lines":["b"]},{"start":{"row":76,"column":93},"end":{"row":76,"column":94},"action":"insert","lines":["e"]},{"start":{"row":76,"column":94},"end":{"row":76,"column":95},"action":"insert","lines":["r"]}],[{"start":{"row":76,"column":99},"end":{"row":76,"column":100},"action":"remove","lines":["l"],"id":92},{"start":{"row":76,"column":98},"end":{"row":76,"column":99},"action":"remove","lines":["e"]},{"start":{"row":76,"column":97},"end":{"row":76,"column":98},"action":"remove","lines":["t"]}],[{"start":{"row":76,"column":97},"end":{"row":76,"column":98},"action":"insert","lines":["p"],"id":93},{"start":{"row":76,"column":98},"end":{"row":76,"column":99},"action":"insert","lines":["r"]},{"start":{"row":76,"column":99},"end":{"row":76,"column":100},"action":"insert","lines":["i"]},{"start":{"row":76,"column":100},"end":{"row":76,"column":101},"action":"insert","lines":["c"]},{"start":{"row":76,"column":101},"end":{"row":76,"column":102},"action":"insert","lines":["e"]}],[{"start":{"row":76,"column":116},"end":{"row":76,"column":117},"action":"remove","lines":["r"],"id":94},{"start":{"row":76,"column":115},"end":{"row":76,"column":116},"action":"remove","lines":["e"]},{"start":{"row":76,"column":114},"end":{"row":76,"column":115},"action":"remove","lines":["s"]},{"start":{"row":76,"column":113},"end":{"row":76,"column":114},"action":"remove","lines":["u"]}],[{"start":{"row":76,"column":113},"end":{"row":76,"column":114},"action":"insert","lines":["o"],"id":95},{"start":{"row":76,"column":114},"end":{"row":76,"column":115},"action":"insert","lines":["r"]},{"start":{"row":76,"column":115},"end":{"row":76,"column":116},"action":"insert","lines":["d"]},{"start":{"row":76,"column":116},"end":{"row":76,"column":117},"action":"insert","lines":["e"]},{"start":{"row":76,"column":117},"end":{"row":76,"column":118},"action":"insert","lines":["r"]}],[{"start":{"row":76,"column":130},"end":{"row":76,"column":131},"action":"remove","lines":["e"],"id":96},{"start":{"row":76,"column":129},"end":{"row":76,"column":130},"action":"remove","lines":["d"]},{"start":{"row":76,"column":128},"end":{"row":76,"column":129},"action":"remove","lines":["o"]},{"start":{"row":76,"column":127},"end":{"row":76,"column":128},"action":"remove","lines":["c"]},{"start":{"row":76,"column":126},"end":{"row":76,"column":127},"action":"remove","lines":["p"]},{"start":{"row":76,"column":125},"end":{"row":76,"column":126},"action":"remove","lines":["i"]},{"start":{"row":76,"column":124},"end":{"row":76,"column":125},"action":"remove","lines":["z"]}],[{"start":{"row":76,"column":124},"end":{"row":76,"column":125},"action":"insert","lines":["i"],"id":97},{"start":{"row":76,"column":125},"end":{"row":76,"column":126},"action":"insert","lines":["t"]},{"start":{"row":76,"column":126},"end":{"row":76,"column":127},"action":"insert","lines":["e"]},{"start":{"row":76,"column":127},"end":{"row":76,"column":128},"action":"insert","lines":["m"]}],[{"start":{"row":76,"column":124},"end":{"row":76,"column":128},"action":"remove","lines":["item"],"id":98},{"start":{"row":76,"column":124},"end":{"row":76,"column":131},"action":"insert","lines":["item_id"]}],[{"start":{"row":76,"column":140},"end":{"row":76,"column":141},"action":"remove","lines":["s"],"id":99},{"start":{"row":76,"column":139},"end":{"row":76,"column":140},"action":"remove","lines":["s"]},{"start":{"row":76,"column":138},"end":{"row":76,"column":139},"action":"remove","lines":["e"]},{"start":{"row":76,"column":137},"end":{"row":76,"column":138},"action":"remove","lines":["r"]},{"start":{"row":76,"column":136},"end":{"row":76,"column":137},"action":"remove","lines":["d"]},{"start":{"row":76,"column":135},"end":{"row":76,"column":136},"action":"remove","lines":["d"]}],[{"start":{"row":76,"column":134},"end":{"row":76,"column":135},"action":"remove","lines":["a"],"id":100}],[{"start":{"row":76,"column":134},"end":{"row":76,"column":135},"action":"insert","lines":["n"],"id":101},{"start":{"row":76,"column":135},"end":{"row":76,"column":136},"action":"insert","lines":["u"]},{"start":{"row":76,"column":136},"end":{"row":76,"column":137},"action":"insert","lines":["m"]},{"start":{"row":76,"column":137},"end":{"row":76,"column":138},"action":"insert","lines":["b"]},{"start":{"row":76,"column":138},"end":{"row":76,"column":139},"action":"insert","lines":["e"]},{"start":{"row":76,"column":139},"end":{"row":76,"column":140},"action":"insert","lines":["r"]}],[{"start":{"row":76,"column":145},"end":{"row":76,"column":146},"action":"remove","lines":["l"],"id":102},{"start":{"row":76,"column":144},"end":{"row":76,"column":145},"action":"remove","lines":["e"]},{"start":{"row":76,"column":143},"end":{"row":76,"column":144},"action":"remove","lines":["t"]}],[{"start":{"row":76,"column":143},"end":{"row":76,"column":144},"action":"insert","lines":["p"],"id":103},{"start":{"row":76,"column":144},"end":{"row":76,"column":145},"action":"insert","lines":["r"]},{"start":{"row":76,"column":145},"end":{"row":76,"column":146},"action":"insert","lines":["i"]},{"start":{"row":76,"column":146},"end":{"row":76,"column":147},"action":"insert","lines":["c"]},{"start":{"row":76,"column":147},"end":{"row":76,"column":148},"action":"insert","lines":["e"]}],[{"start":{"row":78,"column":42},"end":{"row":78,"column":43},"action":"remove","lines":["r"],"id":104},{"start":{"row":78,"column":41},"end":{"row":78,"column":42},"action":"remove","lines":["e"]},{"start":{"row":78,"column":40},"end":{"row":78,"column":41},"action":"remove","lines":["s"]},{"start":{"row":78,"column":39},"end":{"row":78,"column":40},"action":"remove","lines":["u"]}],[{"start":{"row":78,"column":39},"end":{"row":78,"column":40},"action":"insert","lines":["o"],"id":105},{"start":{"row":78,"column":40},"end":{"row":78,"column":41},"action":"insert","lines":["r"]},{"start":{"row":78,"column":41},"end":{"row":78,"column":42},"action":"insert","lines":["d"]},{"start":{"row":78,"column":42},"end":{"row":78,"column":43},"action":"insert","lines":["e"]},{"start":{"row":78,"column":43},"end":{"row":78,"column":44},"action":"insert","lines":["r"]}],[{"start":{"row":78,"column":60},"end":{"row":78,"column":61},"action":"remove","lines":["r"],"id":106},{"start":{"row":78,"column":59},"end":{"row":78,"column":60},"action":"remove","lines":["e"]},{"start":{"row":78,"column":58},"end":{"row":78,"column":59},"action":"remove","lines":["s"]},{"start":{"row":78,"column":57},"end":{"row":78,"column":58},"action":"remove","lines":["u"]}],[{"start":{"row":78,"column":57},"end":{"row":78,"column":58},"action":"insert","lines":["o"],"id":107},{"start":{"row":78,"column":58},"end":{"row":78,"column":59},"action":"insert","lines":["r"]},{"start":{"row":78,"column":59},"end":{"row":78,"column":60},"action":"insert","lines":["d"]},{"start":{"row":78,"column":60},"end":{"row":78,"column":61},"action":"insert","lines":["e"]},{"start":{"row":78,"column":61},"end":{"row":78,"column":62},"action":"insert","lines":["r"]}],[{"start":{"row":78,"column":57},"end":{"row":78,"column":65},"action":"remove","lines":["order_id"],"id":108},{"start":{"row":78,"column":57},"end":{"row":78,"column":65},"action":"insert","lines":["order_id"]}],[{"start":{"row":79,"column":45},"end":{"row":79,"column":46},"action":"remove","lines":["e"],"id":109},{"start":{"row":79,"column":44},"end":{"row":79,"column":45},"action":"remove","lines":["d"]},{"start":{"row":79,"column":43},"end":{"row":79,"column":44},"action":"remove","lines":["o"]},{"start":{"row":79,"column":42},"end":{"row":79,"column":43},"action":"remove","lines":["c"]},{"start":{"row":79,"column":41},"end":{"row":79,"column":42},"action":"remove","lines":["p"]},{"start":{"row":79,"column":40},"end":{"row":79,"column":41},"action":"remove","lines":["i"]},{"start":{"row":79,"column":39},"end":{"row":79,"column":40},"action":"remove","lines":["z"]}],[{"start":{"row":79,"column":39},"end":{"row":79,"column":40},"action":"insert","lines":["i"],"id":110},{"start":{"row":79,"column":40},"end":{"row":79,"column":41},"action":"insert","lines":["t"]},{"start":{"row":79,"column":41},"end":{"row":79,"column":42},"action":"insert","lines":["e"]},{"start":{"row":79,"column":42},"end":{"row":79,"column":43},"action":"insert","lines":["m"]}],[{"start":{"row":79,"column":39},"end":{"row":79,"column":43},"action":"remove","lines":["item"],"id":111},{"start":{"row":79,"column":39},"end":{"row":79,"column":46},"action":"insert","lines":["item_id"]}],[{"start":{"row":79,"column":62},"end":{"row":79,"column":63},"action":"remove","lines":["e"],"id":112},{"start":{"row":79,"column":61},"end":{"row":79,"column":62},"action":"remove","lines":["d"]},{"start":{"row":79,"column":60},"end":{"row":79,"column":61},"action":"remove","lines":["o"]},{"start":{"row":79,"column":59},"end":{"row":79,"column":60},"action":"remove","lines":["c"]},{"start":{"row":79,"column":58},"end":{"row":79,"column":59},"action":"remove","lines":["p"]},{"start":{"row":79,"column":57},"end":{"row":79,"column":58},"action":"remove","lines":["i"]},{"start":{"row":79,"column":56},"end":{"row":79,"column":57},"action":"remove","lines":["z"]}],[{"start":{"row":79,"column":56},"end":{"row":79,"column":57},"action":"insert","lines":["i"],"id":113},{"start":{"row":79,"column":57},"end":{"row":79,"column":58},"action":"insert","lines":["t"]},{"start":{"row":79,"column":58},"end":{"row":79,"column":59},"action":"insert","lines":["e"]}],[{"start":{"row":79,"column":56},"end":{"row":79,"column":59},"action":"remove","lines":["ite"],"id":114},{"start":{"row":79,"column":56},"end":{"row":79,"column":63},"action":"insert","lines":["item_id"]}],[{"start":{"row":79,"column":78},"end":{"row":79,"column":79},"action":"remove","lines":["R"],"id":115},{"start":{"row":79,"column":77},"end":{"row":79,"column":78},"action":"remove","lines":["T"]},{"start":{"row":79,"column":76},"end":{"row":79,"column":77},"action":"remove","lines":["S"]}],[{"start":{"row":79,"column":76},"end":{"row":79,"column":77},"action":"insert","lines":["I"],"id":116},{"start":{"row":79,"column":77},"end":{"row":79,"column":78},"action":"insert","lines":["N"]},{"start":{"row":79,"column":78},"end":{"row":79,"column":79},"action":"insert","lines":["T"]}],[{"start":{"row":80,"column":45},"end":{"row":80,"column":46},"action":"remove","lines":["s"],"id":117},{"start":{"row":80,"column":44},"end":{"row":80,"column":45},"action":"remove","lines":["s"]},{"start":{"row":80,"column":43},"end":{"row":80,"column":44},"action":"remove","lines":["e"]},{"start":{"row":80,"column":42},"end":{"row":80,"column":43},"action":"remove","lines":["r"]},{"start":{"row":80,"column":41},"end":{"row":80,"column":42},"action":"remove","lines":["d"]},{"start":{"row":80,"column":40},"end":{"row":80,"column":41},"action":"remove","lines":["d"]},{"start":{"row":80,"column":39},"end":{"row":80,"column":40},"action":"remove","lines":["a"]}],[{"start":{"row":80,"column":39},"end":{"row":80,"column":40},"action":"insert","lines":["n"],"id":118},{"start":{"row":80,"column":40},"end":{"row":80,"column":41},"action":"insert","lines":["u"]},{"start":{"row":80,"column":41},"end":{"row":80,"column":42},"action":"insert","lines":["m"]},{"start":{"row":80,"column":42},"end":{"row":80,"column":43},"action":"insert","lines":["b"]},{"start":{"row":80,"column":43},"end":{"row":80,"column":44},"action":"insert","lines":["e"]},{"start":{"row":80,"column":44},"end":{"row":80,"column":45},"action":"insert","lines":["r"]}],[{"start":{"row":80,"column":61},"end":{"row":80,"column":62},"action":"remove","lines":["s"],"id":119},{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"remove","lines":["s"]},{"start":{"row":80,"column":59},"end":{"row":80,"column":60},"action":"remove","lines":["e"]},{"start":{"row":80,"column":58},"end":{"row":80,"column":59},"action":"remove","lines":["r"]},{"start":{"row":80,"column":57},"end":{"row":80,"column":58},"action":"remove","lines":["d"]},{"start":{"row":80,"column":56},"end":{"row":80,"column":57},"action":"remove","lines":["d"]},{"start":{"row":80,"column":55},"end":{"row":80,"column":56},"action":"remove","lines":["a"]}],[{"start":{"row":80,"column":55},"end":{"row":80,"column":56},"action":"insert","lines":["n"],"id":120},{"start":{"row":80,"column":56},"end":{"row":80,"column":57},"action":"insert","lines":["u"]},{"start":{"row":80,"column":57},"end":{"row":80,"column":58},"action":"insert","lines":["m"]},{"start":{"row":80,"column":58},"end":{"row":80,"column":59},"action":"insert","lines":["b"]},{"start":{"row":80,"column":59},"end":{"row":80,"column":60},"action":"insert","lines":["e"]},{"start":{"row":80,"column":60},"end":{"row":80,"column":61},"action":"insert","lines":["r"]}],[{"start":{"row":80,"column":76},"end":{"row":80,"column":77},"action":"remove","lines":["R"],"id":121},{"start":{"row":80,"column":75},"end":{"row":80,"column":76},"action":"remove","lines":["T"]},{"start":{"row":80,"column":74},"end":{"row":80,"column":75},"action":"remove","lines":["S"]}],[{"start":{"row":80,"column":74},"end":{"row":80,"column":75},"action":"insert","lines":["I"],"id":122},{"start":{"row":80,"column":75},"end":{"row":80,"column":76},"action":"insert","lines":["N"]},{"start":{"row":80,"column":76},"end":{"row":80,"column":77},"action":"insert","lines":["T"]}],[{"start":{"row":81,"column":41},"end":{"row":81,"column":42},"action":"remove","lines":["l"],"id":123},{"start":{"row":81,"column":40},"end":{"row":81,"column":41},"action":"remove","lines":["e"]},{"start":{"row":81,"column":39},"end":{"row":81,"column":40},"action":"remove","lines":["t"]}],[{"start":{"row":81,"column":39},"end":{"row":81,"column":40},"action":"insert","lines":["p"],"id":124},{"start":{"row":81,"column":40},"end":{"row":81,"column":41},"action":"insert","lines":["r"]},{"start":{"row":81,"column":41},"end":{"row":81,"column":42},"action":"insert","lines":["i"]},{"start":{"row":81,"column":42},"end":{"row":81,"column":43},"action":"insert","lines":["c"]},{"start":{"row":81,"column":43},"end":{"row":81,"column":44},"action":"insert","lines":["e"]}],[{"start":{"row":81,"column":56},"end":{"row":81,"column":57},"action":"remove","lines":["l"],"id":125},{"start":{"row":81,"column":55},"end":{"row":81,"column":56},"action":"remove","lines":["e"]},{"start":{"row":81,"column":54},"end":{"row":81,"column":55},"action":"remove","lines":["t"]}],[{"start":{"row":81,"column":54},"end":{"row":81,"column":55},"action":"insert","lines":["p"],"id":126},{"start":{"row":81,"column":55},"end":{"row":81,"column":56},"action":"insert","lines":["r"]},{"start":{"row":81,"column":56},"end":{"row":81,"column":57},"action":"insert","lines":["i"]},{"start":{"row":81,"column":57},"end":{"row":81,"column":58},"action":"insert","lines":["c"]},{"start":{"row":81,"column":58},"end":{"row":81,"column":59},"action":"insert","lines":["e"]}],[{"start":{"row":81,"column":74},"end":{"row":81,"column":75},"action":"remove","lines":["R"],"id":127},{"start":{"row":81,"column":73},"end":{"row":81,"column":74},"action":"remove","lines":["T"]},{"start":{"row":81,"column":72},"end":{"row":81,"column":73},"action":"remove","lines":["S"]}],[{"start":{"row":81,"column":72},"end":{"row":81,"column":73},"action":"insert","lines":["I"],"id":128},{"start":{"row":81,"column":73},"end":{"row":81,"column":74},"action":"insert","lines":["N"]},{"start":{"row":81,"column":74},"end":{"row":81,"column":75},"action":"insert","lines":["T"]}],[{"start":{"row":0,"column":0},"end":{"row":243,"column":0},"action":"remove","lines":["<?php","    // モデル(M)","    require_once 'models/Model.php';","    require_once 'models/User.php';","    require_once 'models/Item.php';","    require_once 'models/Cart.php';","    // require_once 'models/OrderItem.php';","","    // 注文商品の設計図を作成","    class OrderItem extends Model{","        // プロパティ","        public $id; // 注文商品番号","        public $order_id; // 注文番号","        public $item_id; // 商品番号","        public $number; // 商品の個数","        public $price; // 商品の価格","        public $created_at; // 注文日時","","        // コンストラクタ","        public function __construct($order_id=\"\", $item_id=\"\", $number=\"\", $price=\"\"){","            $this->order_id = $order_id;","            $this->item_id = $item_id;","            $this->number = $number;","            $this->price = $price;","        }","        ","        // 入力チェックをするメソッド","        public function validate(){","            // 空のエラー配列作成","            $errors = array();","            // ユーザーIDが入力されていなければ","            if($this->user_id === ''){","                $errors[] = 'ユーザー番号が入力されていません';","            }","            // 郵便番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{3}-[0-9]{4}$/', $this->zipcode)){","                $errors[] = '郵便番号をxxx-xxxxの形式で入力してください';","            }","            // 個数が選択されていなければ","            if($this->address === ''){","                $errors[] = '住所を入力してください';","            }","            // 電話番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{2,4}-[0-9]{2,4}-[0-9]{3,4}$/', $this->tel)){","                $errors[] = '電話番号をxxx-xxxx-xxxx���形式で入力してください';","            }","            ","            // 完成したエラー配列はいあげる","            return $errors;","        }","      ","        // 全テーブル情報を取得するメソッド","        public static function all($user_id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo->prepare('SELECT * FROM orders WHERE user_id=:user_id');","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","                // フェッチの結果を、Orderクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Order');","                $orders = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                // Orderクラスのインスタンスの配列を返す","                return $orders;","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // データを1件登録するメソッド","        public function save(){","            try {","                $pdo = self::get_connection();","                ","                if($this->id === null){","                    $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");","                    // バインド処理","                    $stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                    $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                    $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                    $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);","                    // 実行","                    $stmt->execute();","                    ","                    $order_id = $pdo->lastInsertId();","                    ","                }else{ // 更新","                     $stmt = $pdo -> prepare(\"UPDATE carts SET number=:number, updated_at=NOW() WHERE id=:id\");","                     // バインド処理","                     $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                     $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                     // 実行","                     $stmt->execute();","                }","                ","                self::close_connection($pdo, $stmp);","                if($this->id === null){","                    return $order_id;","                }else{","                    return 'カート番号: ' . $this->id . 'のカート商品の個数を更新しました。';","                }","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public static function find($id){","                try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select * from carts where id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $item = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $item;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        public static function destroy($id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"DELETE FROM carts WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","               ","            } catch (PDOException $e) {","                    return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        // 重複チェック","        public static function find_my_cart($user_id, $item_id){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"SELECT * FROM carts WHERE user_id=:user_id AND item_id=:item_id\");","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $item_id, PDO::PARAM_INT);","","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $my_cart = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $my_cart;                ","            ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // その注文に紐づいた注文商品一覧を取得","        public function order_items(){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select orders.id as order_id, items.id as item_id, items.name, items.image, order_items.number, order_items.price, order_items.price*order_items.number as subtotal, orders.created_at from order_items join orders on order_items.order_id=orders.id join users on orders.user_id=users.id join items on order_items.item_id=items.id where orders.id=:order_id\");","                // バインド処理","                $stmt->bindParam(':order_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、OrderItemクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'OrderItem');","                $order_items = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $order_items;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function favorites(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select users.id, users.name from favorites JOIN users ON favorites.user_id = users.id WHERE favorites.post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Userクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User');","                $favorites_users = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $favorites_users;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function update_flag(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"UPDATE items SET status_flag=:status_flag WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':status_flag', $this->status_flag, PDO::PARAM_INT);","                $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","            ","                ","                self::close_connection($pdo, $stmp);","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        public function commit(){","            // try{","                $pdo = self::get_connection();","                ","                // $pdo->beginTransaction();","                ","                $order_id = $this->save();","                $carts = Cart::all($this->user_id);","                ","                foreach($carts as $cart){","                    // カートの商品番号から商品情報を取得","                    $item = Item::find($cart->item_id);","                    // 新しい注文商品詳細を作成","                    $order_item = new OrderItem($order_id, $cart->item_id, $cart->number, $item->price);","                    // 注文商品詳細をデータベースに保存","                    $order_item->save();","                    // カート情報削除","                    Cart::destroy($cart->id);","                    // 商品の在庫を減らす","                    $item->stock -= $cart->number;","                    // 商品の在庫更新","                    $item->save();","                    ","                    ","                }","                // $pdo->commit();","            // }catch(PDOException $e){","            //     // $pdo->rollback();","            //     return null;","            // }","        }","    }",""],"id":129},{"start":{"row":0,"column":0},"end":{"row":206,"column":0},"action":"insert","lines":["<?php","    // モデル(M)","    require_once 'models/User.php';","    require_once 'models/Model.php';","","    // 注文商品詳細の設計図を作成","    class OrderItem extends Model{","        // プロパティ","        public $id; // 注文商品詳細番号","        public $order_id; //注文番号","        public $item_id; // 商品番号","        public $number; // 個数","        public $price; // 決定価格","        public $created_at; // 注文日時","","        // コンストラクタ","        public function __construct($order_id=\"\", $item_id=\"\", $number=\"\", $price=\"\"){","            $this->order_id = $order_id;","            $this->item_id = $item_id;","            $this->number = $number;","            $this->price = $price;","        }","        ","        // 入力チェックをするメソッド","        public function validate(){","            // 空のエラー配列作成","            $errors = array();","            // ユーザーIDが入力されていなければ","            if($this->user_id === ''){","                $errors[] = 'ユーザー番号が入力されていません';","            }","            // 郵便番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{3}-[0-9]{4}$/', $this->zipcode)){","                $errors[] = '郵便番号をxxx-xxxxの形式で入力してください';","            }","            // 個数が選択さ���ていなければ","            if($this->address === ''){","                $errors[] = '住所を入力してください';","            }","            // 電話番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{2,4}-[0-9]{2,4}-[0-9]{3,4}$/', $this->tel)){","                $errors[] = '電話番号をxxx-xxxx-xxxxの形式で入力してください';","            }","            ","            // 完成したエラー配列はいあげる","            return $errors;","        }","      ","        // 全テーブル情報を取得するメソッド","        public static function all($user_id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo->prepare('SELECT carts.id, carts.item_id, items.name, items.image, items.price, items.stock, carts.number, carts.created_at FROM carts JOIN items on carts.item_id=items.id WHERE carts.user_id=:user_id');","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $carts = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                // Cartクラスのインスタンスの配列を返す","                return $carts;","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // データを1件登録するメソッド","        public function save(){","            try {","                $pdo = self::get_connection();","                ","                if($this->id === null){","                    $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");","                    // バインド処理","                    $stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                    $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                    $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                    $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);","                    // 実行","                    $stmt->execute();","                    ","                }else{ // 更新","                     $stmt = $pdo -> prepare(\"UPDATE carts SET number=:number, updated_at=NOW() WHERE id=:id\");","                     // バインド処理","                     $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                     $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                     // 実行","                     $stmt->execute();","                }","                ","                self::close_connection($pdo, $stmp);","                if($this->id === null){","                    return '';","                }else{","                    return 'カート番号: ' . $this->id . 'のカート商品の個数を更新しました。';","                }","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public static function find($id){","                try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select * from carts where id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $item = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $item;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        public static function destroy($id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"DELETE FROM carts WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","               ","            } catch (PDOException $e) {","                    return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        // 重複チェック","        public static function find_my_cart($user_id, $item_id){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"SELECT * FROM carts WHERE user_id=:user_id AND item_id=:item_id\");","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $item_id, PDO::PARAM_INT);","","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $my_cart = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $my_cart;                ","            ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // その投稿に紐づいたコメント一覧を取得","        public function comments(){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select comments.id, users.name, comments.content, comments.created_at from comments join users on comments.user_id = users.id where post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Commentクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Comment');","                $comments = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $comments;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function favorites(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select users.id, users.name from favorites JOIN users ON favorites.user_id = users.id WHERE favorites.post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Userクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User');","                $favorites_users = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $favorites_users;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function update_flag(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"UPDATE items SET status_flag=:status_flag WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':status_flag', $this->status_flag, PDO::PARAM_INT);","                $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","            ","                ","                self::close_connection($pdo, $stmp);","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","    }",""]}],[{"start":{"row":0,"column":0},"end":{"row":206,"column":0},"action":"remove","lines":["<?php","    // モデル(M)","    require_once 'models/User.php';","    require_once 'models/Model.php';","","    // 注文商品詳細の設計図を作成","    class OrderItem extends Model{","        // プロパティ","        public $id; // 注文商品詳細番号","        public $order_id; //注文番号","        public $item_id; // 商品番号","        public $number; // 個数","        public $price; // 決定価格","        public $created_at; // 注文日時","","        // コンストラクタ","        public function __construct($order_id=\"\", $item_id=\"\", $number=\"\", $price=\"\"){","            $this->order_id = $order_id;","            $this->item_id = $item_id;","            $this->number = $number;","            $this->price = $price;","        }","        ","        // 入力チェックをするメソッド","        public function validate(){","            // 空のエラー配列作成","            $errors = array();","            // ユーザーIDが入力されていなければ","            if($this->user_id === ''){","                $errors[] = 'ユーザー番号が入力されていません';","            }","            // 郵便番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{3}-[0-9]{4}$/', $this->zipcode)){","                $errors[] = '郵便番号をxxx-xxxxの形式で入力してください';","            }","            // 個数が選択されていなければ","            if($this->address === ''){","                $errors[] = '住所を入力してください';","            }","            // 電話番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{2,4}-[0-9]{2,4}-[0-9]{3,4}$/', $this->tel)){","                $errors[] = '電話番号をxxx-xxxx-xxxxの形式で入力してください';","            }","            ","            // 完成したエラー配列はいあげる","            return $errors;","        }","      ","        // 全テーブル情報を取得するメソッド","        public static function all($user_id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo->prepare('SELECT carts.id, carts.item_id, items.name, items.image, items.price, items.stock, carts.number, carts.created_at FROM carts JOIN items on carts.item_id=items.id WHERE carts.user_id=:user_id');","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $carts = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                // Cartクラスのインスタンスの配列を返す","                return $carts;","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // データを1件登録するメソッド","        public function save(){","            try {","                $pdo = self::get_connection();","                ","                if($this->id === null){","                    $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");","                    // バインド処理","                    $stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                    $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                    $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                    $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);","                    // 実行","                    $stmt->execute();","                    ","                }else{ // 更新","                     $stmt = $pdo -> prepare(\"UPDATE carts SET number=:number, updated_at=NOW() WHERE id=:id\");","                     // バインド処理","                     $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                     $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                     // 実行","                     $stmt->execute();","                }","                ","                self::close_connection($pdo, $stmp);","                if($this->id === null){","                    return '';","                }else{","                    return 'カート番号: ' . $this->id . 'のカート商品の個数を更新しました。';","                }","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public static function find($id){","                try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select * from carts where id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $item = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $item;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        public static function destroy($id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"DELETE FROM carts WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","               ","            } catch (PDOException $e) {","                    return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        // 重複チェック","        public static function find_my_cart($user_id, $item_id){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"SELECT * FROM carts WHERE user_id=:user_id AND item_id=:item_id\");","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $item_id, PDO::PARAM_INT);","","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $my_cart = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $my_cart;                ","            ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // その投稿に紐づいたコメント一覧を取得","        public function comments(){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select comments.id, users.name, comments.content, comments.created_at from comments join users on comments.user_id = users.id where post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Commentクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Comment');","                $comments = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $comments;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function favorites(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select users.id, users.name from favorites JOIN users ON favorites.user_id = users.id WHERE favorites.post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Userクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User');","                $favorites_users = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $favorites_users;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function update_flag(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"UPDATE items SET status_flag=:status_flag WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':status_flag', $this->status_flag, PDO::PARAM_INT);","                $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","            ","                ","                self::close_connection($pdo, $stmp);","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","    }",""],"id":130},{"start":{"row":0,"column":0},"end":{"row":206,"column":0},"action":"insert","lines":["<?php","    // モデル(M)","    require_once 'models/User.php';","    require_once 'models/Model.php';","","    // 注文商品詳細の設計図を作成","    class OrderItem extends Model{","        // プロパティ","        public $id; // 注文商品詳細番号","        public $order_id; //注文番号","        public $item_id; // 商品番号","        public $number; // 個数","        public $price; // 決定価格","        public $created_at; // 注文日時","","        // コンストラクタ","        public function __construct($order_id=\"\", $item_id=\"\", $number=\"\", $price=\"\"){","            $this->order_id = $order_id;","            $this->item_id = $item_id;","            $this->number = $number;","            $this->price = $price;","        }","        ","        // 入力チェックをするメソッド","        public function validate(){","            // 空のエラー配列作成","            $errors = array();","            // ユーザーIDが入力されていなければ","            if($this->user_id === ''){","                $errors[] = 'ユーザー番号が入力されていません';","            }","            // 郵便番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{3}-[0-9]{4}$/', $this->zipcode)){","                $errors[] = '郵便番号をxxx-xxxxの形式で入力してください';","            }","            // 個数が選択されていなければ","            if($this->address === ''){","                $errors[] = '住所を入力してください';","            }","            // 電話番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{2,4}-[0-9]{2,4}-[0-9]{3,4}$/', $this->tel)){","                $errors[] = '電話番号をxxx-xxxx-xxxxの形式で入力してください';","            }","            ","            // 完成したエラー配列はいあげる","            return $errors;","        }","      ","        // 全テーブル情報を取得するメソッド","        public static function all($user_id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo->prepare('SELECT carts.id, carts.item_id, items.name, items.image, items.price, items.stock, carts.number, carts.created_at FROM carts JOIN items on carts.item_id=items.id WHERE carts.user_id=:user_id');","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $carts = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                // Cartクラスのインスタンスの配列を返す","                return $carts;","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // データを1件登録するメソッド","        public function save(){","            try {","                $pdo = self::get_connection();","                ","                if($this->id === null){","                    $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");","                    // バインド処理","                    $stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                    $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                    $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                    $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);","                    // 実行","                    $stmt->execute();","                    ","                }else{ // 更新","                     $stmt = $pdo -> prepare(\"UPDATE carts SET number=:number, updated_at=NOW() WHERE id=:id\");","                     // バインド処理","                     $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                     $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                     // 実行","                     $stmt->execute();","                }","                ","                self::close_connection($pdo, $stmp);","                if($this->id === null){","                    return '';","                }else{","                    return 'カート番号: ' . $this->id . 'のカート商品の個数を更新しました。';","                }","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public static function find($id){","                try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select * from carts where id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $item = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $item;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        public static function destroy($id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"DELETE FROM carts WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","               ","            } catch (PDOException $e) {","                    return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        // 重複チェック","        public static function find_my_cart($user_id, $item_id){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"SELECT * FROM carts WHERE user_id=:user_id AND item_id=:item_id\");","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $item_id, PDO::PARAM_INT);","","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $my_cart = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $my_cart;                ","            ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // その投稿に紐づいたコメント一覧を取得","        public function comments(){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select comments.id, users.name, comments.content, comments.created_at from comments join users on comments.user_id = users.id where post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Commentクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Comment');","                $comments = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $comments;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function favorites(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select users.id, users.name from favorites JOIN users ON favorites.user_id = users.id WHERE favorites.post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Userクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User');","                $favorites_users = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $favorites_users;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function update_flag(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"UPDATE items SET status_flag=:status_flag WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':status_flag', $this->status_flag, PDO::PARAM_INT);","                $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","            ","                ","                self::close_connection($pdo, $stmp);","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","    }",""]}],[{"start":{"row":23,"column":7},"end":{"row":46,"column":9},"action":"remove","lines":[" // 入力チェックをするメソッド","        public function validate(){","            // 空のエラー配列作成","            $errors = array();","            // ユーザーIDが入力されていなければ","            if($this->user_id === ''){","                $errors[] = 'ユーザー番号が入力されていません';","            }","            // 郵便番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{3}-[0-9]{4}$/', $this->zipcode)){","                $errors[] = '郵便番号をxxx-xxxxの形式で入力してください';","            }","            // 個数が選択されていなければ","            if($this->address === ''){","                $errors[] = '住所を入力してください';","            }","            // 電話番号が正しく入力されていなければ","            if(!preg_match('/^[0-9]{2,4}-[0-9]{2,4}-[0-9]{3,4}$/', $this->tel)){","                $errors[] = '電話番号をxxx-xxxx-xxxxの形式で入力してください';","            }","            ","            // 完成したエラー配列はいあげる","            return $errors;","        }"],"id":131},{"start":{"row":23,"column":6},"end":{"row":23,"column":7},"action":"remove","lines":[" "]},{"start":{"row":23,"column":5},"end":{"row":23,"column":6},"action":"remove","lines":[" "]},{"start":{"row":23,"column":4},"end":{"row":23,"column":5},"action":"remove","lines":[" "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":22,"column":8},"end":{"row":23,"column":0},"action":"remove","lines":["",""],"id":132},{"start":{"row":22,"column":4},"end":{"row":22,"column":8},"action":"remove","lines":["    "]},{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"remove","lines":["    "]},{"start":{"row":21,"column":9},"end":{"row":22,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":23,"column":0},"end":{"row":41,"column":9},"action":"remove","lines":["        // 全テーブル情報を取得するメソッド","        public static function all($user_id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo->prepare('SELECT carts.id, carts.item_id, items.name, items.image, items.price, items.stock, carts.number, carts.created_at FROM carts JOIN items on carts.item_id=items.id WHERE carts.user_id=:user_id');","                // バインド処理","                $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $carts = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                // Cartクラスのインスタンスの配列を返す","                return $carts;","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }"],"id":133},{"start":{"row":22,"column":6},"end":{"row":23,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":76,"column":0},"end":{"row":88,"column":8},"action":"remove","lines":["        public static function destroy($id){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"DELETE FROM carts WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","               ","            } catch (PDOException $e) {","                    return 'PDO exception: ' . $e->getMessage();","            }","        }","        "],"id":134},{"start":{"row":75,"column":8},"end":{"row":76,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["    require_once 'models/Model.php';",""],"id":135}],[{"start":{"row":25,"column":16},"end":{"row":51,"column":17},"action":"remove","lines":["$pdo = self::get_connection();","                ","                if($this->id === null){","                    $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");","                    // バインド処理","                    $stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                    $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                    $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                    $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);","                    // 実行","                    $stmt->execute();","                    ","                }else{ // 更新","                     $stmt = $pdo -> prepare(\"UPDATE carts SET number=:number, updated_at=NOW() WHERE id=:id\");","                     // バインド処理","                     $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                     $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                     // 実行","                     $stmt->execute();","                }","                ","                self::close_connection($pdo, $stmp);","                if($this->id === null){","                    return '';","                }else{","                    return 'カート番号: ' . $this->id . 'のカート商品の個数を更新しました。';","                }"],"id":136}],[{"start":{"row":25,"column":16},"end":{"row":32,"column":21},"action":"remove","lines":["","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public static function find($id){","                try {"],"id":137},{"start":{"row":25,"column":12},"end":{"row":25,"column":16},"action":"remove","lines":["    "]},{"start":{"row":25,"column":8},"end":{"row":25,"column":12},"action":"remove","lines":["    "]},{"start":{"row":25,"column":4},"end":{"row":25,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"remove","lines":["    "],"id":138},{"start":{"row":24,"column":17},"end":{"row":25,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":26,"column":16},"end":{"row":35,"column":16},"action":"remove","lines":["$stmt = $pdo -> prepare(\"select * from carts where id=:id\");","                // バインド処理","                $stmt->bindParam(':id', $id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $item = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $item;","                "],"id":139}],[{"start":{"row":26,"column":16},"end":{"row":35,"column":46},"action":"remove","lines":["","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        ","        // 重複チェック","        public static function find_my_cart($user_id, $item_id){","             try {","                $pdo = self::get_connection();"],"id":140}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["                $stmt = $pdo -> prepare(\"SELECT * FROM carts WHERE user_id=:user_id AND item_id=:item_id\");",""],"id":141},{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["                $stmt = $pdo -> prepare(\"INSERT INTO order_items (order_id, item_id, number, price) VALUES (:order_id, :item_id, :number, :price)\");",""]}],[{"start":{"row":29,"column":15},"end":{"row":31,"column":0},"action":"remove","lines":[" $stmt->bindParam(':user_id', $user_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $item_id, PDO::PARAM_INT);",""],"id":142},{"start":{"row":29,"column":14},"end":{"row":29,"column":15},"action":"remove","lines":[" "]},{"start":{"row":29,"column":13},"end":{"row":29,"column":14},"action":"remove","lines":[" "]},{"start":{"row":29,"column":12},"end":{"row":29,"column":13},"action":"remove","lines":[" "]},{"start":{"row":29,"column":8},"end":{"row":29,"column":12},"action":"remove","lines":["    "]},{"start":{"row":29,"column":4},"end":{"row":29,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":29,"column":0},"end":{"row":29,"column":4},"action":"remove","lines":["    "],"id":143},{"start":{"row":28,"column":25},"end":{"row":29,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":28,"column":25},"end":{"row":29,"column":0},"action":"insert","lines":["",""],"id":144},{"start":{"row":29,"column":0},"end":{"row":29,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":29,"column":16},"end":{"row":32,"column":73},"action":"insert","lines":["$stmt->bindParam(':order_id', $this->order_id, PDO::PARAM_INT);","                $stmt->bindParam(':item_id', $this->item_id, PDO::PARAM_INT);","                $stmt->bindParam(':number', $this->number, PDO::PARAM_INT);","                $stmt->bindParam(':price', $this->price, PDO::PARAM_INT);"],"id":145}],[{"start":{"row":35,"column":16},"end":{"row":58,"column":16},"action":"remove","lines":["// フェッチの結果を、Cartクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Cart');","                $my_cart = $stmt->fetch();","                self::close_connection($pdo, $stmp);","                return $my_cart;                ","            ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        // その投稿に紐づいたコメント一覧を取得","        public function comments(){","             try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select comments.id, users.name, comments.content, comments.created_at from comments join users on comments.user_id = users.id where post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Commentクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Comment');","                $comments = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $comments;","                "],"id":146}],[{"start":{"row":35,"column":15},"end":{"row":57,"column":27},"action":"remove","lines":[" ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function favorites(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"select users.id, users.name from favorites JOIN users ON favorites.user_id = users.id WHERE favorites.post_id=:post_id\");","                // バインド処理","                $stmt->bindParam(':post_id', $this->id, PDO::PARAM_INT);                // 実行","                $stmt->execute();","                // フェッチの結果を、Userクラスのインスタンスにマッピングする","                $stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'User');","                $favorites_users = $stmt->fetchAll();","                self::close_connection($pdo, $stmp);","                return $favorites_users;","                ","            } catch (PDOException $e) {","                return 'PDO exception: ' . $e->getMessage();","            }","        }","        public function upd"],"id":147}],[{"start":{"row":35,"column":15},"end":{"row":45,"column":16},"action":"remove","lines":["ate_flag(){","            try {","                $pdo = self::get_connection();","                $stmt = $pdo -> prepare(\"UPDATE items SET status_flag=:status_flag WHERE id=:id\");","                // バインド処理","                $stmt->bindParam(':status_flag', $this->status_flag, PDO::PARAM_INT);","                $stmt->bindParam(':id', $this->id, PDO::PARAM_INT);","                // 実行","                $stmt->execute();","            ","                "],"id":148}],[{"start":{"row":35,"column":15},"end":{"row":35,"column":16},"action":"insert","lines":[" "],"id":149}],[{"start":{"row":35,"column":16},"end":{"row":36,"column":0},"action":"insert","lines":["                self::close_connection($pdo, $stmt);",""],"id":150}],[{"start":{"row":35,"column":28},"end":{"row":35,"column":32},"action":"remove","lines":["    "],"id":151},{"start":{"row":35,"column":24},"end":{"row":35,"column":28},"action":"remove","lines":["    "]},{"start":{"row":35,"column":20},"end":{"row":35,"column":24},"action":"remove","lines":["    "]},{"start":{"row":35,"column":16},"end":{"row":35,"column":20},"action":"remove","lines":["    "]}],[{"start":{"row":37,"column":11},"end":{"row":37,"column":52},"action":"remove","lines":["     self::close_connection($pdo, $stmp);"],"id":152},{"start":{"row":37,"column":10},"end":{"row":37,"column":11},"action":"remove","lines":[" "]},{"start":{"row":37,"column":9},"end":{"row":37,"column":10},"action":"remove","lines":[" "]},{"start":{"row":37,"column":8},"end":{"row":37,"column":9},"action":"remove","lines":[" "]},{"start":{"row":37,"column":4},"end":{"row":37,"column":8},"action":"remove","lines":["    "]},{"start":{"row":37,"column":0},"end":{"row":37,"column":4},"action":"remove","lines":["    "]},{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":372.5,"scrollleft":0,"selection":{"start":{"row":36,"column":0},"end":{"row":36,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":8,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1644125837004,"hash":"aa92049a3e6623c03f2cf9b8ba87ecc7f7e7a96d"}